%{
#include <stdio.h>
#include <math.h> 			/* -> atof()  */
// c code
#include <string.h>
FILE *fptrFIP;          
int isOk = 1;
char atoms_table[100][100] = {
    "",
    "ID",
    "CONST",
    "public",
    "class",
    "static",
    "void",
    "(",
    ")",
    "String",
    "[",
    "]",
    "{",
    "}",
    ";",
    "=",
    "-",
    "+",
    "*",
    "/",
    "!=",
    "%",
    "Scanner",
    "Main",
    "sc.nextInt",
    "sc.nextDouble",
    "sc.nextLine",
    "System.out.println",
    "System.in",
    "new",
    "while",
    "if",
    "else",
    "double",
    "int",
    "String[]",
    "int[]",
    "main",
    "<",
    "<=",
    ">",
    ">=",
    "!=",
    "FIELD_ACCESS"
};

int getAtomCode(char* atom){
    for(int i = 0; i < 43; i++){
        if(strcmp(atoms_table[i], atom) == 0)
            return i;
    }
    return -1;
   
}

typedef struct FIP_Row {
    char* token;
    int atomCode;
    int positionInTable;
};

char idTable[100][9];
int idTableLen = 0;
char constTable[100][100];
int constTableLen = 0;


int findOrAddPositionIdTable(char *token) {
    for(int i = 0; i < idTableLen; i++){
        if(strcmp(token, idTable[i]) == 0) 
            return i;
    }
    strcpy(idTable[idTableLen], token);
    idTableLen++;
    return idTableLen-1;
}

int findOrAddPositionConstTable(char *token) {
    for(int i = 0; i < constTableLen; i++){
        if(strcmp(token, constTable[i]) == 0) 
            return i;
    }
    strcpy(constTable[constTableLen], token);
    constTableLen++;
    return constTableLen-1;
}



%}
%option noyywrap
%option yylineno

acces_modifier public|private|protected
IOInstruction System.out.println|System.out.print|System.in|sc.nextInt|sc.nextDouble|sc.nextLine
keyword if|else|while|class|new|static|void
entryPointMethod main
type int|double|boolean
ID [a-z]*
className [A-Z][a-z]+
number_dec_hexa (([+-]?([1-9]?[0-9]*[lL]?)(\.[0-9]+)?)[fF]?)|((0[xX][0-9a-fA-F]+)[lL]?)
number_bin 0[bB][01]+
number_oct [+-]?(0[1-7]*[lL]?)
array ([A-Z][a-z]+\[])|int\[]
logicalOperator (==|!=|<=|>=|<|>)
attributionOperator [=]
arithmeticOperator [-+*/%]
accessingField [a-z]{1,8}\.[a-z]{1,8}
%%
{keyword}|{type}|{acces_modifier}|{IOInstruction}|{className}|{array}|{logicalOperator}|{attributionOperator} {
    int atomCode = getAtomCode(yytext);
    fprintf(fptrFIP,"AtomCode=%d,Atom=%s,positionInTable=null\n", atomCode, yytext);
}
{entryPointMethod} {
        int atomCode = getAtomCode(yytext);
        fprintf(fptrFIP,"AtomCode=%d,Atom=%s,positionInTable=null\n", atomCode, yytext);
        }

{arithmeticOperator} {
    int atomCode = getAtomCode(yytext);
    fprintf(fptrFIP,"AtomCode=%d,Atom=%s,positionInTable=null\n", atomCode, yytext);
}
"{"|"}"|"("|")"|"["|"]"|";" {
    int atomCode = getAtomCode(yytext);
    fprintf(fptrFIP,"AtomCode=%d,Atom=%s,positionInTable=null\n", atomCode, yytext);
}
{accessingField} {
    int atomCode = getAtomCode("FIELD_ACCES");
    fprintf(fptrFIP,"AtomCode=%d,Atom=%s,positionInTable=null\n", atomCode, yytext);
}
{ID} {
    int atomCode = getAtomCode("ID");
    if( strlen(yytext) > 9){
        isOk = 0;
        fprintf(fptrFIP,"Error in parsing %s,\n", yytext);
        printf( "Unrecognized chr.: %s at line %d\n", yytext, yylineno);
    }
    int positionInTable = findOrAddPositionIdTable(yytext);
    fprintf(fptrFIP,"AtomCode=%d,Atom=%s,positionInTable=%d\n", atomCode, yytext, positionInTable+1);
}
{number_bin} {
    int atomCode = getAtomCode("CONST");
    int positionInTable = findOrAddPositionConstTable(yytext);
    fprintf(fptrFIP,"AtomCode=%d,Atom=%s,positionInTable=%d\n", atomCode, yytext, positionInTable+1);
}

{number_dec_hexa}|{number_oct} {
    int atomCode = getAtomCode("CONST");
    int positionInTable = findOrAddPositionConstTable(yytext);
    fprintf(fptrFIP,"AtomCode=%d,Atom=%s,positionInTable=%d\n", atomCode, yytext, positionInTable+1);
}

"{"[^}\n]*"}" 	{
                    /* eat up one-line comments */
 }

[ \t\n]+ 	{
	/* eat up whitespace */
}
. { 
        isOk = 0;
        fprintf(fptrFIP,"Error in parsing %s,\n", yytext);
        printf( "Unrecognized chr.: %s at line %d\n", yytext, yylineno);
}
%%
main( argc, argv ) 
int argc; 
char **argv; 
{ 
    ++argv, --argc; /* skip over program name */ 
    if ( argc > 0 ) 
    	yyin = fopen( argv[0], "r" ); 
    else 
     	yyin = stdin; 
    fptrFIP = fopen("fip.csv", "w");
    yylex(); 
    fclose(fptrFIP);
    if(isOk){
        FILE *fptrIdTable;
        fptrIdTable = fopen("idTable.csv", "w");
        for(int i = 0 ; i < idTableLen; i++){
            fprintf(fptrIdTable, "Atom=%s,Position=%d\n", idTable[i],i + 1);
        }
        fclose(fptrIdTable);

        FILE *fptrConstTable;
        fptrConstTable = fopen("constTable.csv", "w");
        for(int i = 0 ; i < constTableLen; i++){
            fprintf(fptrIdTable, "Atom=%s,Position=%d\n", constTable[i],i + 1);
        }
        fclose(fptrConstTable);
    }
} 