%{
#include <stdio.h>
#include <math.h> 			/* -> atof()  */
%}
%option noyywrap
%option yylineno

acces_modifier public|private|protected
IOInstruction System.out.println|System.out.print|System.in|sc.nextInt|sc.nextDouble|sc.nextLine
keyword if|else|while|class|new|static|void
entryPointMethod main
type int|double|boolean
ID [a-z]{1,8}
className [A-Z][a-z]+
number (([+-]?([1-9]?[0-9]*[lL]?)(\.[0-9]+)?)[fF]?)|((0[xX][0-9a-fA-F]+)[lL]?)
array ([A-Z][a-z]+\[])|int\[]
singleLogicalOperator [<>]
compoundLogicalOperator (==|!=|<=|>=)
attributionOperator [=]
arithmeticOperator [-+*/%]
instructionDelimiter ;
%%
{keyword} {
            printf("keyword %s\n", yytext);
        }
main {
        printf("main %s\n", yytext);
        }
{type} {
        printf("type %s\n", yytext);
        }
{acces_modifier} {
        printf("acces modifier %s\n", yytext);
        }
{IOInstruction} {
        printf("IOInstruction %s\n", yytext);
}
{className} {
    printf("className %s\n", yytext);
}
{array} {
    printf("array %s\n", yytext);
}
{singleLogicalOperator} {
    printf("singleLogicalOperator %s\n", yytext);
}
{compoundLogicalOperator} {
    printf("compoundLogicalOperator %s\n", yytext);
}
{attributionOperator} {
    printf("attributionOperator %s\n", yytext);
}
{arithmeticOperator} {
    printf("arithmeticOperator %s\n", yytext);
}
{instructionDelimiter} {
    printf("instructionDelimiter %s\n", yytext);
}
"{"|"}"|"("|")"|"["|"]" {
    printf("Delimiter %s\n", yytext);
}
{ID} {
    printf("ID %s \n", yytext);
}
{number} {
        printf("const %s\n", yytext);
}
[ \t\n]+ 				/* eat up whitespace */
"{"[^}\n]*"}" 			/* eat up one-line comments */
.			 			printf( "Unrecognized chr.: %s\n", yytext );

%%
main( argc, argv ) 
int argc; 
char **argv; 
{ 
    ++argv, --argc; /* skip over program name */ 
    if ( argc > 0 ) 
    	yyin = fopen( argv[0], "r" ); 
    else 
     	yyin = stdin; 
    yylex(); 
} 